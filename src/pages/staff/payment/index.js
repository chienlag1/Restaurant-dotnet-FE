import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";

const Payment = () => {
  const { orderId } = useParams(); // L·∫•y orderId t·ª´ URL
  const navigate = useNavigate();
  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [promotions, setPromotions] = useState([]); // State ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch m√£ gi·∫£m gi√°
  const [selectedPromotion, setSelectedPromotion] = useState(""); // State ƒë·ªÉ l∆∞u tr·ªØ m√£ gi·∫£m gi√° ƒë∆∞·ª£c ch·ªçn
  const [discountPercentage, setDiscountPercentage] = useState(0); // State ƒë·ªÉ l∆∞u tr·ªØ ph·∫ßn trƒÉm gi·∫£m gi√°
  const [discountAmount, setDiscountAmount] = useState(0); // State ƒë·ªÉ l∆∞u tr·ªØ s·ªë ti·ªÅn ƒë√£ ƒë∆∞·ª£c tr·ª´
  const [subtotalAfterDiscount, setSubtotalAfterDiscount] = useState(0); // State ƒë·ªÉ l∆∞u tr·ªØ s·ªë ti·ªÅn sau gi·∫£m gi√°
  const [vatAmount, setVatAmount] = useState(0); // State ƒë·ªÉ l∆∞u tr·ªØ VAT
  const [finalTotal, setFinalTotal] = useState(0); // State ƒë·ªÉ l∆∞u tr·ªØ t·ªïng ti·ªÅn cu·ªëi c√πng

  // L·∫•y th√¥ng tin ƒë∆°n h√†ng t·ª´ API
  useEffect(() => {
    const fetchOrder = async () => {
      try {
        if (!orderId) {
          throw new Error("Kh√¥ng t√¨m th·∫•y m√£ ƒë∆°n h√†ng.");
        }

        const token = localStorage.getItem("authToken");
        if (!token) {
          navigate("/login");
          return;
        }

        const response = await axios.get(
          `http://localhost:5112/api/order/get-order-by-id/${orderId}`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );

        console.log("API Response:", response.data); // Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API
        setOrder(response.data);
      } catch (err) {
        setError(err.message || "ƒê√£ x·∫£y ra l·ªói khi t·∫£i th√¥ng tin ƒë∆°n h√†ng.");
      } finally {
        setLoading(false);
      }
    };

    fetchOrder();
  }, [orderId, navigate]);

  // L·∫•y danh s√°ch m√£ gi·∫£m gi√° t·ª´ API
  useEffect(() => {
    const fetchPromotions = async () => {
      try {
        const token = localStorage.getItem("authToken");
        if (!token) {
          navigate("/login");
          return;
        }
        const response = await axios.get(
          "http://localhost:5112/api/Promotions/get-all-promotions",
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );
        console.log("Promotions API Response:", response.data); // Debug d·ªØ li·ªáu tr·∫£ v·ªÅ
        if (response.data && Array.isArray(response.data.$values)) {
          setPromotions(response.data.$values);
        } else {
          console.error("D·ªØ li·ªáu promotions kh√¥ng h·ª£p l·ªá:", response.data);
        }
      } catch (err) {
        console.error("L·ªói khi l·∫•y danh s√°ch m√£ gi·∫£m gi√°:", err);
      }
    };
    fetchPromotions();
  }, [navigate]);

  // T√≠nh t·ªïng ti·ªÅn c·ªßa ƒë∆°n h√†ng
  const totalAmount =
    order?.orderItems?.$values?.reduce(
      (total, item) => total + item.totalPrice * item.quantity,
      0
    ) || 0;

  console.log("Total Amount:", totalAmount); // Debug gi√° tr·ªã totalAmount

  // T√≠nh to√°n t·ªïng ti·ªÅn sau khi √°p d·ª•ng gi·∫£m gi√° v√† VAT
  useEffect(() => {
    console.log("Selected Promotion:", selectedPromotion);
    console.log("Promotions List:", promotions);
    if (selectedPromotion) {
      const selectedPromo = promotions.find(
        (promo) => promo.name === selectedPromotion
      );
      console.log("Found Promotion:", selectedPromo);
      if (selectedPromo) {
        const discount = totalAmount * (selectedPromo.discountPercentage / 100);
        setDiscountAmount(discount);
        const subtotal = totalAmount - discount;
        setSubtotalAfterDiscount(subtotal);
        const vat = subtotal * 0.1;
        setVatAmount(vat);
        const final = subtotal + vat;
        setFinalTotal(final);
        setDiscountPercentage(selectedPromo.discountPercentage);
      }
    } else {
      const vat = totalAmount * 0.1;
      setVatAmount(vat);
      setFinalTotal(totalAmount + vat);
      setDiscountPercentage(0);
      setDiscountAmount(0);
      setSubtotalAfterDiscount(totalAmount);
    }
  }, [selectedPromotion, totalAmount, promotions]);
  // Hi·ªÉn th·ªã loading khi ƒëang t·∫£i d·ªØ li·ªáu
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
          <p className="mt-4 text-gray-700">ƒêang t·∫£i th√¥ng tin ƒë∆°n h√†ng...</p>
        </div>
      </div>
    );
  }

  // Hi·ªÉn th·ªã l·ªói n·∫øu c√≥
  if (error) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <div className="text-red-500 text-2xl">‚ö†Ô∏è</div>
          <p className="mt-4 text-gray-700">{error}</p>
          <button
            onClick={() => navigate("/order-customer")}
            className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          >
            Quay l·∫°i
          </button>
        </div>
      </div>
    );
  }

  // Hi·ªÉn th·ªã th√¥ng tin ƒë∆°n h√†ng
  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-r from-blue-50 to-purple-50 p-4">
      <div className="flex flex-col md:flex-row w-full h-full max-w-6xl bg-white rounded-lg shadow-lg overflow-hidden">
        {/* Product List Section */}
        <div className="w-full md:w-1/2 p-8 bg-gradient-to-r from-blue-100 to-purple-100 rounded-lg">
          <h3 className="text-2xl font-semibold text-gray-800 mb-6 text-center">
            üõí Danh S√°ch S·∫£n Ph·∫©m
          </h3>

          {/* B·∫£ng danh s√°ch s·∫£n ph·∫©m */}
          <div className="overflow-x-auto">
            <table className="min-w-full bg-white divide-y divide-gray-200 rounded-lg shadow-md">
              <thead className="bg-blue-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                    T√™n S·∫£n Ph·∫©m
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-700 uppercase tracking-wider">
                    Gi√° Ti·ªÅn
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {order?.orderItems?.$values &&
                Array.isArray(order.orderItems.$values) ? (
                  order.orderItems.$values.map((item) => (
                    <tr
                      key={item.orderItemId}
                      className="hover:bg-gray-50 transition-colors"
                    >
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {item.menuItem?.name || "Kh√¥ng c√≥ t√™n"}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-right font-semibold text-gray-800">
                        {(item.totalPrice * item.quantity).toLocaleString()}‚Ç´
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td
                      colSpan="2"
                      className="px-6 py-4 whitespace-nowrap text-sm text-center text-gray-600"
                    >
                      Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong ƒë∆°n h√†ng.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          {/* T·ªïng ti·ªÅn */}
          <div className="mt-8">
            <div className="flex justify-between items-center py-3 border-t border-b border-gray-200">
              <span className="font-medium text-gray-700">T·ªïng Ti·ªÅn:</span>
              <span className="font-semibold text-lg text-gray-800">
                {totalAmount.toLocaleString()} VND
              </span>
            </div>

            {/* Gi·∫£m gi√° */}
            {discountPercentage > 0 && (
              <div className="flex justify-between items-center py-3">
                <span className="text-gray-700">
                  Gi·∫£m gi√° ({discountPercentage}%):
                </span>
                <span className="font-semibold text-red-500">
                  -{discountAmount.toLocaleString()} VND
                </span>
              </div>
            )}

            {/* S·ªë ti·ªÅn sau gi·∫£m gi√° */}
            <div className="flex justify-between items-center py-3">
              <span className="text-gray-700">S·ªë ti·ªÅn sau gi·∫£m gi√°:</span>
              <span className="font-semibold text-gray-800">
                {subtotalAfterDiscount.toLocaleString()} VND
              </span>
            </div>

            {/* VAT */}
            <div className="flex justify-between items-center py-3">
              <span className="text-gray-700">VAT (10%):</span>
              <span className="font-semibold text-green-600">
                +{vatAmount.toLocaleString()} VND
              </span>
            </div>

            {/* T·ªïng ti·ªÅn cu·ªëi c√πng */}
            <div className="flex justify-between items-center py-3 border-t border-gray-200">
              <span className="text-gray-700 font-medium">
                T·ªïng ti·ªÅn cu·ªëi c√πng:
              </span>
              <span className="font-bold text-2xl text-blue-600">
                {finalTotal.toLocaleString()} VND
              </span>
            </div>
          </div>
        </div>

        {/* Payment Information Section */}
        <div className="w-full md:w-1/2 p-8">
          <h3 className="text-2xl font-semibold text-gray-800 mb-8">
            üí≥ Th√¥ng Tin Thanh To√°n
          </h3>

          <form onSubmit={(e) => e.preventDefault()} className="space-y-6">
            <div>
              <label
                htmlFor="tableId"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                B√†n S·ªë
              </label>
              <input
                type="text"
                id="tableId"
                value={order?.tableId || ""} // Hi·ªÉn th·ªã tableId
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                readOnly // Kh√¥ng cho ph√©p ch·ªânh s·ª≠a
              />
            </div>
            <div>
              <label
                htmlFor="customerName"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                T√™n Kh√°ch H√†ng
              </label>
              <input
                type="text"
                id="customerName"
                value={order?.customer?.fullName || ""} // Hi·ªÉn th·ªã t√™n kh√°ch h√†ng
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                readOnly // Kh√¥ng cho ph√©p ch·ªânh s·ª≠a
              />
            </div>
            <div>
              <label
                htmlFor="promotionCode"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                M√£ gi·∫£m gi√°
              </label>
              <select
                id="promotionCode"
                value={selectedPromotion}
                onChange={(e) => setSelectedPromotion(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
              >
                <option value="">Ch·ªçn m√£ gi·∫£m gi√°</option>
                {promotions.map((promotion) => (
                  <option key={promotion.promotionId} value={promotion.name}>
                    {promotion.name} ({promotion.discountPercentage}%)
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label
                htmlFor="paymentMethod"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                Ph∆∞∆°ng Th·ª©c Thanh To√°n
              </label>
              <select
                id="paymentMethod"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
              >
                <option value="card">Th·∫ª T√≠n D·ª•ng</option>
                <option value="cash">Ti·ªÅn M·∫∑t</option>
              </select>
            </div>

            <button
              type="submit"
              className="w-full py-4 px-6 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition-all focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            >
              Thanh To√°n
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Payment;
